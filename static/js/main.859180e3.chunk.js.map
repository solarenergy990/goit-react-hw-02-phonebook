{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactsList/ContactsLIst.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactsList/ContactListItem/ContactListItem.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","index.js","components/ContactsList/ContactListItem/ContactListItem.module.css"],"names":["module","exports","ContactForm","state","name","number","nameInputId","shortid","generate","telInputId","handleChange","evt","target","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","htmlFor","s","label","labelText","type","pattern","title","required","onChange","id","input","button","Component","ContactListItem","contactName","contactNumber","onClickRemove","listItem","listText","onClick","ContactsList","contacts","onContactDelete","children","map","contact","Filter","App","initialContacts","filter","addContact","data","toLowerCase","includes","alert","prevState","deleteContact","contactId","changeFilter","currentTarget","getVisibleContacts","normalizedFilter","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,wB,mBCAxDD,EAAOC,QAAU,CAAC,SAAW,iC,sSCA7BD,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,UAAY,+BAA+B,MAAQ,2BAA2B,OAAS,8B,kMC8E7HC,E,4MA1EbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,YAAcC,IAAQC,W,EACtBC,WAAaF,IAAQC,W,EAErBE,aAAe,SAAAC,GACb,MAAwBA,EAAIC,OAApBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,EAAKC,SAAL,eACGV,EAAOS,K,EAIZE,aAAe,SAAAJ,GACbA,EAAIK,iBAEJ,EAAKC,MAAMC,SAAS,EAAKf,OAEzB,EAAKgB,S,EAGPA,MAAQ,WACN,EAAKL,SAAS,CACZV,KAAM,GACNC,OAAQ,M,4CAIZ,WACE,MAAyBe,KAAKjB,MAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,OACE,8BACE,sBAAMgB,UAAU,OAAOH,SAAUE,KAAKL,aAAtC,SACE,sBAAKM,UAAU,iBAAf,UACE,wBAAOC,QAASF,KAAKd,YAAae,UAAWE,IAAEC,MAA/C,UACE,mBAAGH,UAAWE,IAAEE,UAAhB,kBACA,uBACEC,KAAK,OACLtB,KAAK,OACLuB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUV,KAAKV,aACfqB,GAAIX,KAAKd,YACTO,MAAOT,EACPiB,UAAWE,IAAES,WAGjB,wBAAOV,QAASF,KAAKX,WAAYY,UAAWE,IAAEC,MAA9C,UACE,mBAAGH,UAAWE,IAAEE,UAAhB,oBACA,uBACEC,KAAK,MACLtB,KAAK,SACLuB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUV,KAAKV,aACfqB,GAAIX,KAAKX,WACTI,MAAOR,EACPgB,UAAWE,IAAES,WAGjB,wBAAQN,KAAK,SAASL,UAAWE,IAAEU,OAAnC,oC,GAjEcC,a,gBCaXC,EAdS,SAAC,GAAuD,IAArDJ,EAAoD,EAApDA,GAAIK,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,cAEzD,OACE,qBAAajB,UAAWE,IAAEgB,SAA1B,UACE,oBAAGlB,UAAWE,IAAEiB,SAAhB,UACGJ,EADH,MACmBC,KAEnB,wBAAQX,KAAK,SAASL,UAAWE,IAAEU,OAAQQ,QAASH,EAApD,sBAJOP,I,iBCqBEW,EAtBM,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,SACjD,OACE,sBAAKxB,UAAWE,IAAEoB,SAAlB,UACGE,EACD,6BACGF,EAASG,KAAI,SAAAC,GACZ,IAAQhB,EAAqBgB,EAArBhB,GAAI3B,EAAiB2C,EAAjB3C,KAAMC,EAAW0C,EAAX1C,OAElB,OACE,cAAC,EAAD,CAEE+B,YAAahC,EACbiC,cAAehC,EACfiC,cAAe,kBAAMM,EAAgBb,KAHhCA,Y,iBCEJiB,EAdA,SAAC,GAAyB,IAAvBnC,EAAsB,EAAtBA,MAAOiB,EAAe,EAAfA,SACvB,OACE,kCACE,mBAAGT,UAAWE,IAAEC,MAAhB,mCACA,uBACEH,UAAWE,IAAES,MACbN,KAAK,OACLb,MAAOA,EACPiB,SAAUA,Q,QCgEHmB,E,4MAnEb9C,MAAQ,CACNwC,SAAUO,EACVC,OAAQ,I,EAGVC,WAAa,SAAAC,GACX,IAAQjD,EAAiBiD,EAAjBjD,KAAMC,EAAWgD,EAAXhD,OACNsC,EAAa,EAAKxC,MAAlBwC,SAEFI,EAAU,CACdhB,GAAIxB,IAAQC,WACZJ,OACAC,UAG0BsC,EAASG,KAAI,SAAAC,GACvC,OAAOA,EAAQ3C,KAAKkD,iBAGGC,SAASnD,EAAKkD,eAKrCE,MAAM,GAAD,OAAIpD,EAAJ,4BAJL,EAAKU,UAAS,SAAA2C,GAAS,MAAK,CAC1Bd,SAAS,GAAD,mBAAMc,EAAUd,UAAhB,CAA0BI,S,EAOxCW,cAAgB,SAAAC,GACd,EAAK7C,UAAS,SAAA2C,GAAS,MAAK,CAC1Bd,SAAUc,EAAUd,SAASQ,QAAO,SAAAJ,GAAO,OAAIA,EAAQhB,KAAO4B,U,EAIlEC,aAAe,SAAAjD,GACb,EAAKG,SAAS,CAAEqC,OAAQxC,EAAIkD,cAAchD,S,EAG5CiD,mBAAqB,WACnB,MAA6B,EAAK3D,MAA1BgD,EAAR,EAAQA,OAAQR,EAAhB,EAAgBA,SACVoB,EAAmBZ,EAAOG,cAEhC,OAAOX,EAASQ,QAAO,SAAAJ,GAAO,OAC5BA,EAAQ3C,KAAKkD,cAAcC,SAASQ,O,4CAIxC,WACE,IAAQZ,EAAW/B,KAAKjB,MAAhBgD,OACFa,EAAkB5C,KAAK0C,qBAE7B,OACE,gCACE,2CACA,cAAC,EAAD,CAAa5C,SAAUE,KAAKgC,aAE5B,0CACA,cAAC,EAAD,CAAQvC,MAAOsC,EAAQrB,SAAUV,KAAKwC,eACtC,cAAC,EAAD,CACEjB,SAAUqB,EACVpB,gBAAiBxB,KAAKsC,uB,GA7DdxB,aCDlB+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BrE,EAAOC,QAAU,CAAC,SAAW,kCAAkC,SAAW,kCAAkC,OAAS,mC","file":"static/js/main.859180e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__GTvPG\",\"input\":\"Filter_input__2CYIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactsLIst_contacts__13Nm9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__25ATm\",\"labelText\":\"ContactForm_labelText__2nN-d\",\"input\":\"ContactForm_input__3H0Ae\",\"button\":\"ContactForm_button__3FDUN\"};","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  telInputId = shortid.generate();\n\n  handleChange = evt => {\n    const { name, value } = evt.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n    // console.log(this.state);\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <div>\n        <form className=\"form\" onSubmit={this.handleSubmit}>\n          <div className=\"form-container\">\n            <label htmlFor={this.nameInputId} className={s.label}>\n              <p className={s.labelText}>Name</p>\n              <input\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                onChange={this.handleChange}\n                id={this.nameInputId}\n                value={name}\n                className={s.input}\n              />\n            </label>\n            <label htmlFor={this.telInputId} className={s.label}>\n              <p className={s.labelText}>Number</p>\n              <input\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                required\n                onChange={this.handleChange}\n                id={this.telInputId}\n                value={number}\n                className={s.input}\n              />\n            </label>\n            <button type=\"submit\" className={s.button}>\n              Add contact\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React from 'react';\r\nimport s from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ id, contactName, contactNumber, onClickRemove }) => {\r\n  //   console.log(onContactDelete);\r\n  return (\r\n    <li key={id} className={s.listItem}>\r\n      <p className={s.listText}>\r\n        {contactName} : {contactNumber}\r\n      </p>\r\n      <button type=\"button\" className={s.button} onClick={onClickRemove}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactListItem from '../ContactsList/ContactListItem/ContactListItem';\nimport s from './ContactsLIst.module.css';\n\nconst ContactsList = ({ contacts, onContactDelete, children }) => {\n  return (\n    <div className={s.contacts}>\n      {children}\n      <ul>\n        {contacts.map(contact => {\n          const { id, name, number } = contact;\n\n          return (\n            <ContactListItem\n              key={id}\n              contactName={name}\n              contactNumber={number}\n              onClickRemove={() => onContactDelete(id)}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onContactDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label>\n      <p className={s.label}>Find contacts by name</p>\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      ></input>\n    </label>\n  );\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport Filter from './components/Filter/Filter';\nimport initialContacts from './contacts.json';\nimport shortid from 'shortid';\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: '',\n  };\n\n  addContact = data => {\n    const { name, number } = data;\n    const { contacts } = this.state;\n\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    const checkedContactNames = contacts.map(contact => {\n      return contact.name.toLowerCase();\n    });\n\n    if (!checkedContactNames.includes(name.toLowerCase())) {\n      this.setState(prevState => ({\n        contacts: [...prevState.contacts, contact],\n      }));\n    } else {\n      alert(`${name} is already in contacts`);\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = evt => {\n    this.setState({ filter: evt.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <ContactForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactsList\n          contacts={visibleContacts}\n          onContactDelete={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__ehhW8\",\"listText\":\"ContactListItem_listText__3yX07\",\"button\":\"ContactListItem_button__2Tc1D\"};"],"sourceRoot":""}